name: Build

on:
  push:
    branches: [ player ]

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/f96c71db-2c6c-45d9-8c1f-0348ef5885cf/w_BaseKit_p_2023.2.0.49396_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/438527fc-7140-422c-a851-389f2791816b/w_HPCKit_p_2023.2.0.49441_offline.exe
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  SAMPLES_TAG: 2023.2.0
  COMPILER_VERSION: 2023.2.0
  TBB_VERSION: 2021.10.0
  VS_VER: vs2022
                
jobs:
  builds:
    strategy:
      matrix:
        toolset: [cl, icx, clang-cl, gcc]
        include:
          - toolset: cl
            os: windows-latest
          - toolset: icx
            os: windows-latest
          - toolset: clang-cl
            os: windows-latest
            clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.5/LLVM-17.0.5-win64.exe
          - toolset: gcc
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.6.*'

      - name: Set up clang for Windows
        if: matrix.toolset == 'clang-cl'
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.exe -L ${{ matrix.clang_link }}
          7z.exe x LLVM.exe
          cd ..

      - name: cache intel install
        if: matrix.toolset == 'icx'
        id: cache-install
        uses: actions/cache@v2
        with:
          path: |
              C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat
              C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.CACHE_NUMBER }}-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/scripts/cache_exclude_windows.sh') }}

      - name: install intel
        if: steps.cache-install.outputs.cache-hit != 'true' && matrix.toolset == 'icx'
        run: |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/install_windows.bat ${{ env.WINDOWS_HPCKIT_URL }} ${{ env.WINDOWS_CPP_COMPONENTS }}

      - name: restore registry on cache hit
        if: steps.cache-install.outputs.cache-hit == 'true' && matrix.toolset == 'icx'
        run:  |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/restore_registry.bat ${{ env.COMPILER_VERSION }}
  
      - name: Enable MSVC commands
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install MPV on Windows
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: scripts\win-install-mpv.bat

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |-
          sudo apt-get update
          sudo apt-get install -y ffmpeg libmpv-dev libcurl4-openssl-dev libssl-dev libxkbcommon-x11-0 libxcb-cursor0
          sudo pip install ninja

      - name: Install macOS dependencies
        if: matrix.os == 'macos-11'
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        run: |-
          brew update
          brew install openssl@1.1 mpv freetype double-conversion icu4c jasper jpeg libb2 libtiff pcre2 ninja

      - name: Build on non-Windows
        shell: bash
        if: matrix.os != 'windows-latest'
        env:
          RUNNING_OS: ${{ matrix.os }}
        run: |-
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_INSTALL_PREFIX=/usr ..
          cmake --build . --config Release --parallel --verbose

      - name: Build on Windows
        shell: cmd
        if: matrix.os == 'windows-latest'
        env:
          RUNNING_OS: ${{ matrix.os }}
          vc_arch: x64
        run: |-
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\${{ env.COMPILER_VERSION }}\env\vars.bat"
          set PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\${{ env.COMPILER_VERSION }}\windows\bin-llvm\";%CD%\llvm\bin;%PATH%
          mkdir build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.toolset }} -DCMAKE_CXX_COMPILER=${{ matrix.toolset }} -G Ninja -S . -B build
          cmake --build build --config Release --parallel --verbose

      - name: copy libmmd.dll
        if: matrix.toolset == 'icx'
        shell: cmd
        run: |
          mkdir imchenwen
          copy "C:\Program Files (x86)\Intel\oneAPI\compiler\${{ env.COMPILER_VERSION }}\windows\redist\intel64_win\compiler\libmmd.dll" imchenwen\
          
      - name: Deploy
        shell: bash
        if: matrix.os != 'ubuntu-latest'
        env:
          RUNNING_OS: ${{ matrix.os }}
        run: ./scripts/deploy-${RUNNING_OS}.sh

      - name: Upload artifacts mac app bundle
        uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-11'
        with:
          name: imchenwen_macOS_x86_64
          path: |
            imchenwen_*.zip

      - name: Upload artifacts windows installer
        uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: imchenwen-msvc-${{ matrix.toolset }}-x86_64-setup
          path: imchenwen-msvc-x86_64-setup.exe
            
      - name: Upload artifacts windows archive
        uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: imchenwen-msvc-${{ matrix.toolset }}-x86_64-qt6
          path: imchenwen

  Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - mingw_prefix: mingw-w64-ucrt-x86_64
            mingw_arch: UCRT64
            c: gcc
            cxx: g++
            qt: qt6
            qtprefix: ucrt64
            qtdir: lib/cmake/Qt6
          - mingw_prefix: mingw-w64-x86_64
            mingw_arch: MINGW64
            c: gcc
            cxx: g++
            qt: qt6
            qtprefix: mingw64
            qtdir: lib/cmake/Qt6
          - mingw_prefix: mingw-w64-clang-x86_64
            mingw_arch: CLANG64
            c: clang
            cxx: clang++
            qt: qt6
            qtprefix: clang64
            qtdir: lib/cmake/Qt6
    steps: 
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: python ${{ matrix.mingw_prefix }}-qt5 ${{ matrix.mingw_prefix }}-${{ matrix.qt }} ${{ matrix.mingw_prefix }}-cmake ${{ matrix.mingw_prefix }}-pkg-config ${{ matrix.mingw_prefix }}-python3 ${{ matrix.mingw_prefix }}-gcc ${{ matrix.mingw_prefix }}-ffmpeg ${{ matrix.mingw_prefix }}-libjpeg-turbo ${{ matrix.mingw_prefix }}-lua51 ${{ matrix.mingw_prefix }}-meson ${{ matrix.mingw_prefix }}-glfw ${{ matrix.mingw_prefix }}-xxhash ${{ matrix.mingw_prefix }}-glslang ${{ matrix.mingw_prefix }}-SDL2_image ${{ matrix.mingw_prefix }}-libunwind
          
      - uses: actions/checkout@v3
        with:
          submodules: true
                             
      - name: patch hlsdl 
        run: |
          cd 3rdparty\hlsdl
          git apply ..\hlsdl.patch
          
      - name: clone mingwdeployqt
        run: |
          git clone https://github.com/missdeer/mingwdeployqt.git
          
      - name: Build mingwdeployqt
        shell: msys2 {0}
        run: |
          export MSYSTEM=${{ matrix.mingw_arch }}
          cd mingwdeployqt
          mkdir build
          cd build
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja ..
          ninja
          cp mingwdeployqt.exe /${{ matrix.mingw_arch }}/bin/
          cd ../..
          
      - name: checkout mpv
        run: |
          git clone --depth=1 https://github.com/mpv-player/mpv.git

      - name: build mpv
        shell: msys2 {0}
        run: |
          export MSYSTEM=${{ matrix.mingw_arch }}
          cd mpv
          env PATH=/${{ matrix.mingw_arch }}/bin/ meson setup build --prefix=/${{ matrix.mingw_arch }} -Dlibmpv=true
          env PATH=/${{ matrix.mingw_arch }}/bin/ meson compile -C build
          env PATH=/${{ matrix.mingw_arch }}/bin/ meson install -C build
          cd ..

      - name: build imchenwen
        shell: msys2 {0}
        run: |
          export MSYSTEM=${{ matrix.mingw_arch }}
          mkdir build-imchenwen-${{ matrix.mingw_arch }}
          cd build-imchenwen-${{ matrix.mingw_arch }}
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/${{ matrix.mingw_arch }}/qt6-static/bin cmake "-DCMAKE_PREFIX_PATH=D:/a/_temp/msys64/${{ matrix.qtprefix }}" "-DQT_DIR=D:/a/_temp/msys64/${{ matrix.qtprefix }}/${{ matrix.qtdir }}" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja ..
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/${{ matrix.mingw_arch }}/qt6-static/bin cmake --build . --parallel --verbose
          cd ..
          mkdir imchenwen-${{ matrix.mingw_prefix }}
          cp src/scripts/update-parsers.ps1 imchenwen-${{ matrix.mingw_prefix }}/
          cp build-imchenwen-${{ matrix.mingw_arch }}/src/imchenwen.exe imchenwen-${{ matrix.mingw_prefix }}/ 
          cp build-imchenwen-${{ matrix.mingw_arch }}/3rdparty/hlsdl.exe imchenwen-${{ matrix.mingw_prefix }}/
          cd imchenwen-${{ matrix.mingw_prefix }}
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/${{ matrix.mingw_arch }}/qt6-static/bin windeployqt-qt6.exe --qmldir="$PWD/../src/qml" $PWD/imchenwen.exe
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/${{ matrix.mingw_arch }}/qt6-static/bin mingwdeployqt.exe $PWD/imchenwen.exe
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/${{ matrix.mingw_arch }}/qt6-static/bin mingwdeployqt.exe $PWD/hlsdl.exe
          cp /${{ matrix.mingw_arch }}/bin/ffmpeg.exe ./
          cp ../qt.conf ./
          cd ..
          mv imchenwen-${{ matrix.mingw_prefix }} imchenwen
          
      - name: make installer
        shell: cmd
        run: |
          iscc scripts\win_installer.iss

      - name: rename installer
        shell: msys2 {0}
        run: |
          mv scripts/Output/mysetup.exe ./imchenwen-${{ matrix.mingw_prefix }}-${{ matrix.qt }}-setup.exe
          
      - name: upload artifact
        uses: actions/upload-artifact@v1
        with:
          path: imchenwen
          name: imchenwen-${{ matrix.mingw_prefix }}-${{ matrix.qt }}

      - name: upload artifact setup
        uses: actions/upload-artifact@v1
        with:
          path: imchenwen-${{ matrix.mingw_prefix }}-${{ matrix.qt }}-setup.exe
          name: imchenwen-${{ matrix.mingw_prefix }}-${{ matrix.qt }}-setup
  